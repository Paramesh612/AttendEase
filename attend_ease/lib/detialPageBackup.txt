import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';

class Dummy extends StatefulWidget {
  final String subjectName;
  final int contactHours;
  final int hoursAttended;
  final int missedClasses;
  DetailPage createState() => DetailPage();

  Dummy({
    required this.subjectName,
    required this.contactHours,
    required this.hoursAttended,
    required this.missedClasses,
  });
}

class DetailPage extends State<Dummy> {
  DateTime _focusedDay = DateTime(2023, 6, 1);
  DateTime? _selectedDay;
  double calculateAttendancePercentage(int attended, int total) {
    return (attended / total) * 100;
  }

  @override
  Widget build(BuildContext context) {
    final DateTime firstDay = DateTime(2023, 1, 1);
    final DateTime lastDay = DateTime(2023, 12, 31);
    final DateTime focusedDay = DateTime(2023);
    return Scaffold(
      appBar: AppBar(
        title: Text(
          widget.subjectName,
          style: TextStyle(
            color: Colors.white,
          ),
        ),
        backgroundColor: Colors.black,
      ),
      backgroundColor: Colors.black,
      body: Padding(
        padding: EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Total Classes: $widget.contactHours',
              style: TextStyle(fontSize: 18, color: Colors.white),
            ),
            Text(
              'Classes Attended: $widget.hoursAttended',
              style: TextStyle(fontSize: 18, color: Colors.white),
            ),
            Text(
              'Classes Missed: $widget.missedClasses',
              style: TextStyle(fontSize: 18, color: Colors.white),
            ),
            Text(
              'Attendance Percentage: ${calculateAttendancePercentage(widget.hoursAttended, widget.contactHours).toStringAsFixed(1)}%',
              style: TextStyle(fontSize: 18, color: Colors.white),
            ),
            SizedBox(height: 20),
            Text(
              'Class Attendance Calendar:',
              style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.white),
            ),
            SizedBox(height: 10),
            Center(
              child: SizedBox(
                width: 120,
                height: 120,
                child: Stack(
                  fit: StackFit.expand,
                  children: [
                    CircularProgressIndicator(
                      value: calculateAttendancePercentage(
                              widget.hoursAttended, widget.contactHours) /
                          100,
                      strokeWidth: 6,
                      backgroundColor: Colors.grey[400],
                      valueColor: AlwaysStoppedAnimation<Color>(
                        getColorBasedOnPercentage(
                          calculateAttendancePercentage(
                              widget.hoursAttended, widget.contactHours),
                        ),
                      ),
                    ),
                    Center(
                      child: Text(
                        '${calculateAttendancePercentage(widget.hoursAttended, widget.contactHours).toStringAsFixed(1)}%',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            SizedBox(height: 10),
            TableCalendar(
              firstDay: firstDay,
              lastDay: lastDay,
              focusedDay: focusedDay,
              selectedDayPredicate: (day) {
                // Highlights the selected day
                return isSameDay(_selectedDay, day);
              },
              onDaySelected: (selectedDay, focusedDay) {
                setState(() {
                  _selectedDay = selectedDay;
                  focusedDay = focusedDay; // Update the focused day
                });
              },
              headerStyle: HeaderStyle(
                formatButtonVisible: false, // Hides the format button
                titleTextStyle: TextStyle(
                  color: Colors.blueAccent, // Color for the month and year text
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
                leftChevronIcon: Icon(
                  Icons.chevron_left,
                  color: Colors.blueAccent, // Color for the left arrow
                ),
                rightChevronIcon: Icon(
                  Icons.chevron_right,
                  color: Colors.blueAccent, // Color for the right arrow
                ),
                titleCentered: true, // Centers the month/year text
              ),
              calendarStyle: CalendarStyle(
                todayDecoration: BoxDecoration(
                  color: Colors.blue, // Color for today's date
                  shape: BoxShape.circle,
                ),
                selectedDecoration: BoxDecoration(
                  color: Colors.green, // Color for the selected date
                  shape: BoxShape.circle,
                ),
                weekendTextStyle:
                    TextStyle(color: Colors.yellow), // Color for weekend dates
                defaultTextStyle:
                    TextStyle(color: Colors.white), // Color for regular dates
                outsideDaysVisible: false,
                holidayTextStyle:
                    TextStyle(color: Colors.orange), // Color for holiday dates
              ),
              daysOfWeekStyle: DaysOfWeekStyle(
                weekendStyle:
                    TextStyle(color: Colors.yellow), // Color for weekend labels
                weekdayStyle:
                    TextStyle(color: Colors.white), // Color for weekday labels
              ),
            ),
          ],
        ),
      ),
    );
  }

  Color getColorBasedOnPercentage(double percentage) {
    if (percentage >= 75) {
      return Colors.green;
    } else if (percentage >= 50) {
      return Colors.orange;
    } else {
      return Colors.red;
    }
  }
}